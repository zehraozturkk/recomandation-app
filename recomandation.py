# -*- coding: utf-8 -*-
"""recomandation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZHwk69eqsQZRliN6dLsdeiSepE6xrXgt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

df = pd.read_csv("orders_clean.csv")

df

df.info()

# DateTime dönüşümü
df['purchase_date'] = pd.to_datetime(df['purchase_date'])

# Yıl, Ay, Gün gibi yeni sütunlar ekleme
df['year'] = df['purchase_date'].dt.year
df['month'] = df['purchase_date'].dt.month
df['day_of_week'] = df['purchase_date'].dt.day_name()

# Mevsim sütunu ekleme
def get_season(month):
    if month in [12, 1, 2]:
        return 'Winter'
    elif month in [3, 4, 5]:
        return 'Spring'
    elif month in [6, 7, 8]:
        return 'Summer'
    else:
        return 'Fall'

df['season'] = df['month'].apply(get_season)

df.drop(["purchase_month","purchase_weekday" ], axis=1, inplace=True)

# Yıllık satış dağılımı
annual_sales = df.groupby('year').size()
annual_sales.plot(kind='bar', title='Annual Sales Distribution')
plt.show()

# Aylık satış dağılımı
monthly_sales = df.groupby('month').size()
monthly_sales.plot(kind='bar', title='Monthly Sales Distribution')
plt.show()

# Mevsimsel satış dağılımı
seasonal_sales = df.groupby('season').size()
seasonal_sales.plot(kind='bar', title='Seasonal Sales Distribution')
plt.show()

# Belirli bir yılda, mevsimde veya ayda en popüler ürünler
popular_products_season = df[df['season'] == 'Summer']['product_name'].value_counts().head(10)
print("Summer Season's Top 10 Products:\n", popular_products_season)

# Mevsimsel en çok satan ürünlerin görselleştirilmesi
sns.barplot(x=popular_products_season.index, y=popular_products_season.values)
plt.title("Top 10 Products in Summer")
plt.xticks(rotation=45)
plt.show()

"""# sezonluk ürün önerisi"""

import pandas as pd

# def get_seasonal_recommendations(season, df, top_n=5):
#     season_products = df[df['season'] == season]['product_name'].value_counts().head(top_n)
#     return pd.DataFrame({
#         'Product Name': season_products.index,
#         'Purchase Count': season_products.values
#     })

def get_seasonal_recommendations(season, df, top_n=5):
    # DataFrame'in gerekli sütunlara sahip olup olmadığını kontrol edin
    if 'season' not in df.columns or 'product_name' not in df.columns:
        raise ValueError("DataFrame, 'season' ve 'product_name' sütunlarına sahip olmalıdır.")
    
    # İlgili sezonu filtreleyin ve en popüler ürünleri bulun
    season_products = df[df['season'] == season]['product_name'].value_counts().head(top_n)
    
    # Eğer ilgili sezonda ürün yoksa, boş bir DataFrame döndürün
    if season_products.empty:
        return pd.DataFrame({
            'Product Name': [],
            'Purchase Count': []
        })
    
    return pd.DataFrame({
        'Product Name': season_products.index,
        'Purchase Count': season_products.values
    })

# Örnek kullanım: Yaz sezonu için öneriler
recommendations_df = get_seasonal_recommendations('Summer', df)
recommendations_df

"""# fiyata göre recomandation"""

price_bins = [0, 50, 100, 150, 200, 250, 300, np.inf]
price_labels = ['0-50', '51-100', '101-150', '151-200', '201-250', '251-300', '300+']

df['price_range'] = pd.cut(df['item_price'], bins=price_bins, labels=price_labels, right=False)

# Fiyat aralığına göre en popüler ürünler
def get_popular_products_in_price_range(price_range, df, top_n=5):
    popular_products = df[df['price_range'] == price_range]['product_name'].value_counts().head(top_n)
    return pd.DataFrame({
        'Product Name': popular_products.index,
        'Purchase Count': popular_products.values
    })

# Örnek kullanım: 100-150 TL aralığı için öneriler
recommendations = get_popular_products_in_price_range('101-150', df)
recommendations

def get_popular_products_in_price_range(price_range, df, top_n=5):
    # Belirli fiyat aralığındaki popüler ürünler
    filtered_df = df[df['price_range'] == price_range]
    popular_products = filtered_df['product_name'].value_counts().head(top_n)

    # Her ürün için ortalama fiyatı hesapla
    avg_prices = filtered_df.groupby('product_name')['item_price'].mean()

    # DataFrame oluşturma
    recommendations = pd.DataFrame({
        'Product Name': popular_products.index,
        'Purchase Count': popular_products.values,
        'Average Price': popular_products.index.map(avg_prices)
    })

    return recommendations

# Örnek kullanım: 100-150 TL aralığı için öneriler
recommendations = get_popular_products_in_price_range('101-150', df)
recommendations

"""# Keepa veri seti"""

df_keepa = pd.read_csv("KeepaExport-2024-06-04-ProductViewer.csv")

df_keepa[["ASIN", 'Freq. Bought Together', "Product Group"]]

df_keepa.rename(columns={"ASIN": "asin"}, inplace=True)

merged_df = pd.merge(df, df_keepa[["asin", 'Freq. Bought Together',"Product Group"]], on='asin')

merged_df_clean = merged_df.dropna(subset=['Product Group'])

"""# kategori bazlı öneri"""
from mlxtend.preprocessing import TransactionEncoder


def load_data():
    # Veri dosyalarının yolunu belirtin
    merged_df_clean = pd.read_csv('merged_df_hendel.csv')
    return merged_df_clean

def preprocess_data(merged_df_clean):
    x = merged_df_clean['Product Group'].apply(lambda x: x.split(', '))
    te = TransactionEncoder()
    x = te.fit_transform(x)
    x = pd.DataFrame(x, columns=te.columns_)
    category = x.astype('int')
    category.insert(0, 'asin', merged_df_clean['asin'])
    category = category.drop_duplicates()
    category = category.set_index('asin')
    x = category.transpose()
    return x

def recommendation_asin(asin, x, merged_df):
    asin_product_df = merged_df_clean[['asin', 'product_name']].drop_duplicates()
    asin = asin.strip()  # Boşlukları temizle

    if asin not in x.columns:
        return pd.DataFrame({'Error': [f"ASIN '{asin}' not found in the dataset"]})

    asin_series = x[asin]  # Verilen ASIN'e ait Series'i al
    similar_asin = x.corrwith(asin_series)  # Tüm ASIN'lerle korelasyon hesapla
    similar_asin = similar_asin[similar_asin.index != asin]  # Kendini hariç tut
    similar_asin = similar_asin.sort_values(ascending=False)  # Korelasyona göre sırala
    similar_asin = similar_asin.head(20)  # İlk 20 öneriyi al
    
    recommendations = pd.DataFrame({
        'ASIN': similar_asin.index,
        'Correlation': similar_asin.values
    }).merge(asin_product_df, left_on='ASIN', right_on='asin', how='left')

    return recommendations[['ASIN', 'product_name', 'Correlation']]



# # Kategoriler virgülle ayrılmışsa
# x = merged_df_clean['Product Group'].apply(lambda x: x.split(', '))

# # TransactionEncoder'ı kullanarak veriyi dönüştür
# te = TransactionEncoder()
# x = te.fit_transform(x)
# x = pd.DataFrame(x, columns=te.columns_)

# # Kategorileri binary (0 veya 1) değerlere dönüştür
# category = x.astype('int')

# # ASIN sütununu başa ekle
# category.insert(0, 'asin', merged_df_clean['asin'])

# # Veri kümesinden tekrar eden ASIN'leri çıkar
# category = category.drop_duplicates()

# # ASIN'i index olarak ayarla
# category = category.set_index('asin')

# # Transpoz alarak satırları sütunlara çevir
# x = category.transpose()

# # ASIN ve ürün adlarını içeren DataFrame

# def recommendation_asin(asin):
#     asin_product_df = merged_df[['asin', 'product_name']].drop_duplicates()

#     asin = asin.strip()  # Boşlukları temizle

#     if asin not in x.columns:
#         return pd.DataFrame({'Error': [f"ASIN '{asin}' not found in the dataset"]})

#     asin_series = x[asin]  # Verilen ASIN'e ait Series'i al
#     similar_asin = x.corrwith(asin_series)  # Tüm ASIN'lerle korelasyon hesapla
#     similar_asin = similar_asin[similar_asin.index != asin]  # Kendini hariç tut
#     similar_asin = similar_asin.sort_values(ascending=False)  # Korelasyona göre sırala
#     similar_asin = similar_asin.head(20)  # İlk 20 öneriyi al
    
#     recommendations = pd.DataFrame({
#         'ASIN': similar_asin.index,
#         'Correlation': similar_asin.values
#     }).merge(asin_product_df, left_on='ASIN', right_on='asin', how='left')

#     return recommendations[['ASIN', 'product_name', 'Correlation']]








"""# keepa veri setinde beraber alının ürünler

"""

def get_frequently_bought_together(asin, df):
    products = df[df['asin'] == asin]['Freq. Bought Together'].values
    if len(products) > 0:
        return products[0].split(',')
    else:
        return []

# Örnek kullanım
recommendations = get_frequently_bought_together('B00AVVV8YU', merged_df)
print("Frequently Bought Together:", recommendations)

"""# aynı basket içerisinde beraber alınan ürünlerin önerisi"""

from collections import Counter

def get_related_products(order_id, df_orders):
    related_asins = df_orders[df_orders['amazon_order_id'] == order_id]['asin'].tolist()

    # ASIN'lerin tekrar sayılarını hesapla
    asin_counts = Counter(related_asins)

    # ASIN'leri tekrar sayılarıyla birlikte yaz
    related_products = [f"{asin} (x{count})" if count > 1 else asin for asin, count in asin_counts.items()]

    return related_products

# Örnek kullanım
related_products = get_related_products('304-3449081-8947501', merged_df)
print("Related Products:", related_products)

#Related Products: ['B00AVVV7UU (x2)', 'B00AVVV8YU (x2)', 'B00DE5YQ6W (x2)', 'B00SR9XE2W (x2)']


recommendations = get_frequently_bought_together('B00AVVV7UU', merged_df)
print(f"Frequently Bought Together: {related_products[0]}=", recommendations)
recommendations = get_frequently_bought_together('B00AVVV8YU', merged_df)
print(f"Frequently Bought Together: {related_products[1]}=", recommendations)
recommendations = get_frequently_bought_together('B00DE5YQ6W', merged_df)
print(f"Frequently Bought Together: {related_products[2]}=", recommendations)
recommendations = get_frequently_bought_together('B00SR9XE2W', merged_df)
print(f"Frequently Bought Together: {related_products[3]}=", recommendations)



